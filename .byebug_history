exit
meter
exit
ussd_vendor
option
kind
text
customer
meter
second_param
exit
@exit
exit
params["requestParam"]["data"][5]["value"]
params["requestParam"]["data"][5]["value"]params["requestParam"]["data"][5]["value"]
params["requestParam"]["data"][5]["value"]params["requestParam"]["data"][5]["value"]params["requestParam"]["data"][5]["value"]params["requestParam"]["data"][5]["value"]params["requestParam"]["data"][5]["value"]params["requestParam"]["data"][5]["value"]
continue
@customer
next
@customer
next
@customer
params
exit
params
pparams
exit
home_path
dynamic_dashboard_link(accessible,@team)
accessible
home_path
exit
ussd_vendor
exit
current_team.allow_access("ussd_manager")
exit
a.info
a.infor
a.infor]
a.row[1]
a.default_sheet = a.sheets[1]
a.sheets
a.info
a.infor
a.row(1)
a.last_column
a.first_row
a
exit
current_team.team_interfaces
current_team
exit
@confirmations.to_json
@confirmations.to_a
b = _
@confirmations
b = confirmations.to_a
confirmations
timeline
exit
@sales.pluck(" Sales").inject(0){|sum,x| sum + x }
@sales.pluck(" Sales").inject(0)
@sales.pluck(" Sales")
@sales
exit
params["requestParam"]["data"][0]["name"] == "LinkId"
params["requestParam"]["data"][0]["name"]
params["requestParam"]["data"][0]
params["requestParam"]["data"].class
params["requestParam"]["data"]
gitparams["requestParam"]["data"]
exit
@demand
params["requestParam"]["data"][1]["value"] == "DELIVERY_RECEIPT"
if params["requestParam"]["data"][1]["value"] == "DELIVERY_RECEIPT"
exit
params["requestParam"]["data"][1]["value"]e
params["requestParam"]["data"][1]
params["requestParam"]["data"][2]
params["requestParam"]["data"][3]
params["requestParam"]["data"][4]
exit
@demand
@customer
params["requestParam"]["data"][4]
exit
params["requestTimeStamp"]
params["requestId"]
params["requestId"
params["requestParam"]["data"][3]["value"]
exit
@demand.update_attribute(:error_code => params["requestParam"]["data"][0]["value"].to_i)
@demand.update_attribute(error_code: params["requestParam"]["data"][0]["value"].to_i)
@demand.update_attribute(error_code: params["requestParam"]["data"][0]["value"])
params["requestParam"]["data"][0]["value"]
@demand.class
@demand
exit
next
exit
next
params["requestParam"]["data"][0]["value"]
params["requestParam"]["data"][0]
params["requestParam"]["data"]
params["requestParam"]
exit
next
@demand
exit
params["requestParam"]["data"][3]
params["requestParam"]["data"]
exit
params["requestParam"]["data"][4]["value"]
params[:requestParam][:data][4]["value"]
params[:requestParam][:data][4]
params[:requestParam][:data][3]
params[:requestParam][:data][2]
params[:requestParam][:data][0]
params[:requestParam][:data].first
params[:requestParam][:data].class
params[:requestParam][:data]
params[:requestParam][:data][:value]
params[:requestParam][:data]
params[:requestParam]
params[:requestParams]
params
exit
current_app
key
value
exit
User::APPLICATIONS.key("application_analytics")
User::APPLICATIONS.key(["application_analytics"])
User::APPLICATIONS.key(["application_analytics"]O
User::APPLICATIONS["application_analytics"]
User::APPLICATIONS
session[:current_app]
current_app
value
exit
session[:current_app]
User::APPLICATIONS
value
exit
ussd_vendor
exit
@kind
exit
params
params['ussd_string']
@kind
exit
@kind
ussd_vendor
exit
ussd_vendor
exit
ussd_vendor
exit
ussd_vendor
exit
cause
exit
POWEROUTAGE[1]
POWEROUTAGE[0]
POWEROUTAGE
second_param.to_i - 1
second_param.to_i -1 
second_param.to_i
second_param
cause
exit
cause
exit
cause
exit
second_param
exit
option
kind
text 
second_param
exit
@ussd_string
response
exit
@ussd_string
response
exit
response
exit
received.to_json
received
exit
received["USSDDynMenuRequest"]["dataSet"]["param"][3]["value"]
received["USSDDynMenuRequest"]["dataSet"]["param"][3]
received["USSDDynMenuRequest"]["dataSet"]["param"]
received["USSDDynMenuRequest"]["dataSet"]["params"]
received["USSDDynMenuRequest"]["dataSet"]
@session_id
@ussd_string 
@phone_number
@request_id
exit
received
received["USSDDynMenuRequest"]["msisdn"]
received["USSDDynMenuRequest"]["requestId"]
received["USSDDynMenuRequest"]
received.last
received.first
received
xml
exit
next
response
exit
customer.accounts.size
customer.accounts
customer
Customer.meters.count
Customer.accounts.count
Customer.accounts.size
text
customer
chosen_meter
meter
exit
(end_date - start_date)/1.day 
(end_date - start_date)1.day 
end_date.date
end_date - start_date 
start_date - end_date
exit
end_date
start_date
end_date.class
end_date
start_date
exit
start_date
end_date
exit
Date.strptime(start_date, '%d %B %Y')
Date.strptime(start_date, '%d %B %Y').strftime('%D')
Date.strptime(start_date, '%m %B %Y')
start_date
start_date = Date.strptime(start_date, '%m %B %Y').strftime('%D')
start_datee
exit
meter
exit
meter
exit
prepaid_traffic["Fri, 13 Mar 2020".to_sym]
prepaid_traffic[Fri, 13 Mar 2020]
prepaid_traffic["Fri, 13 Mar 2020"]
